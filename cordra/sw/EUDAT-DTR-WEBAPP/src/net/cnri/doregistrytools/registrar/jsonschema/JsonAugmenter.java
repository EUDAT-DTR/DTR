/*************************************************************************\
    Copyright (c) 2015 Corporation for National Research Initiatives;
                        All rights reserved.
     The CNRI open source license for this software is available at
                  http://hdl.handle.net/20.1000/106
\*************************************************************************/

package net.cnri.doregistrytools.registrar.jsonschema;

import java.util.Map;

import net.cnri.dobj.DOConstants;
import net.cnri.doregistrytools.registrar.auth.AccessControlList;
import net.cnri.repository.DigitalObject;
import net.cnri.repository.InternalException;
import net.cnri.repository.RepositoryException;
import net.cnri.util.FastDateFormat;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.TextNode;

public class JsonAugmenter {
    public void augment(DigitalObject dobj, JsonNode json, Map<String, JsonNode> pointerToSchemaMap, String userId) throws RepositoryException {
        for (Map.Entry<String, JsonNode> entry : pointerToSchemaMap.entrySet()) {
            String jsonPointer = entry.getKey();
            JsonNode subSchema = entry.getValue();
            JsonNode autoGeneratedFieldNode = JsonUtil.getDeepProperty(subSchema, Constants.REPOSITORY_SCHEMA_KEYWORD, "type", "autoGeneratedField");
            if (autoGeneratedFieldNode == null) continue;
            String autoGeneratedFieldName = autoGeneratedFieldNode.asText(null);
            if (autoGeneratedFieldName == null) continue;
            augmentAtPointer(dobj, json, jsonPointer, autoGeneratedFieldName, userId);
        }
    }

    private static void augmentAtPointer(DigitalObject dobj, JsonNode json, String jsonPointer, String autoGeneratedFieldName, String userId) throws RepositoryException {
        String replacement = getAutoGeneratedField(dobj, autoGeneratedFieldName, userId);
        JsonUtil.replaceJsonAtPointer(json, jsonPointer, new TextNode(replacement));
    }
    
    private static String getAutoGeneratedField(DigitalObject dobj, String autoGeneratedFieldName, String userId) throws RepositoryException {
        if ("handle".equals(autoGeneratedFieldName)) {
            return dobj.getHandle();
        } else if ("creationDate".equals(autoGeneratedFieldName)) {
            return formatDate(dobj.getAttribute(DOConstants.DATE_CREATED_ATTRIBUTE));
        } else if ("modificationDate".equals(autoGeneratedFieldName)) {
            return formatDate(System.currentTimeMillis());
        } else if ("createdBy".equals(autoGeneratedFieldName)) {
            return dobj.getAttribute(AccessControlList.CREATED_BY_ATTRIBUTE);
        } else if ("type".equals(autoGeneratedFieldName)) {
            return dobj.getAttribute("type");
        } else if ("modifiedBy".equals(autoGeneratedFieldName)) {
            if (userId == null) {
                return "anonymous";
            } else {
                return userId;
            }
        } else {
            throw new IllegalArgumentException(autoGeneratedFieldName);
        }
    }
    
    private static String formatDate(String longAsString) throws RepositoryException {
        try {
            return formatDate(Long.parseLong(longAsString));
        } catch (NumberFormatException e) {
            throw new InternalException("Unexpected date " + longAsString);
        }
    }
    
    private static String formatDate(long date) {
        return FastDateFormat.formatUtc(date);
    }
}
